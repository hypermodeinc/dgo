//
// SPDX-FileCopyrightText: © Hypermode Inc. <hello@hypermode.com>
// SPDX-License-Identifier: Apache-2.0

// Style guide for Protocol Buffer 3.
// Use CamelCase (with an initial capital) for message names – for example,
// SongServerRequest. Use underscore_separated_names for field names – for
// example, song_name.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Dgraph_Login_FullMethodName                           = "/api.Dgraph/Login"
	Dgraph_Query_FullMethodName                           = "/api.Dgraph/Query"
	Dgraph_Alter_FullMethodName                           = "/api.Dgraph/Alter"
	Dgraph_CommitOrAbort_FullMethodName                   = "/api.Dgraph/CommitOrAbort"
	Dgraph_CheckVersion_FullMethodName                    = "/api.Dgraph/CheckVersion"
	Dgraph_RunDQL_FullMethodName                          = "/api.Dgraph/RunDQL"
	Dgraph_AllocateIDs_FullMethodName                     = "/api.Dgraph/AllocateIDs"
	Dgraph_UpdateExtSnapshotStreamingState_FullMethodName = "/api.Dgraph/UpdateExtSnapshotStreamingState"
	Dgraph_StreamExtSnapshot_FullMethodName               = "/api.Dgraph/StreamExtSnapshot"
	Dgraph_CreateNamespace_FullMethodName                 = "/api.Dgraph/CreateNamespace"
	Dgraph_DropNamespace_FullMethodName                   = "/api.Dgraph/DropNamespace"
	Dgraph_ListNamespaces_FullMethodName                  = "/api.Dgraph/ListNamespaces"
)

// DgraphClient is the client API for Dgraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Graph response.
type DgraphClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Alter(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*Payload, error)
	CommitOrAbort(ctx context.Context, in *TxnContext, opts ...grpc.CallOption) (*TxnContext, error)
	CheckVersion(ctx context.Context, in *Check, opts ...grpc.CallOption) (*Version, error)
	RunDQL(ctx context.Context, in *RunDQLRequest, opts ...grpc.CallOption) (*Response, error)
	AllocateIDs(ctx context.Context, in *AllocateIDsRequest, opts ...grpc.CallOption) (*AllocateIDsResponse, error)
	UpdateExtSnapshotStreamingState(ctx context.Context, in *UpdateExtSnapshotStreamingStateRequest, opts ...grpc.CallOption) (*UpdateExtSnapshotStreamingStateResponse, error)
	StreamExtSnapshot(ctx context.Context, opts ...grpc.CallOption) (Dgraph_StreamExtSnapshotClient, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	DropNamespace(ctx context.Context, in *DropNamespaceRequest, opts ...grpc.CallOption) (*DropNamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
}

type dgraphClient struct {
	cc grpc.ClientConnInterface
}

func NewDgraphClient(cc grpc.ClientConnInterface) DgraphClient {
	return &dgraphClient{cc}
}

func (c *dgraphClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dgraph_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dgraph_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) Alter(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*Payload, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payload)
	err := c.cc.Invoke(ctx, Dgraph_Alter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) CommitOrAbort(ctx context.Context, in *TxnContext, opts ...grpc.CallOption) (*TxnContext, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnContext)
	err := c.cc.Invoke(ctx, Dgraph_CommitOrAbort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) CheckVersion(ctx context.Context, in *Check, opts ...grpc.CallOption) (*Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Version)
	err := c.cc.Invoke(ctx, Dgraph_CheckVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) RunDQL(ctx context.Context, in *RunDQLRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Dgraph_RunDQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) AllocateIDs(ctx context.Context, in *AllocateIDsRequest, opts ...grpc.CallOption) (*AllocateIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocateIDsResponse)
	err := c.cc.Invoke(ctx, Dgraph_AllocateIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) UpdateExtSnapshotStreamingState(ctx context.Context, in *UpdateExtSnapshotStreamingStateRequest, opts ...grpc.CallOption) (*UpdateExtSnapshotStreamingStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExtSnapshotStreamingStateResponse)
	err := c.cc.Invoke(ctx, Dgraph_UpdateExtSnapshotStreamingState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) StreamExtSnapshot(ctx context.Context, opts ...grpc.CallOption) (Dgraph_StreamExtSnapshotClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Dgraph_ServiceDesc.Streams[0], Dgraph_StreamExtSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dgraphStreamExtSnapshotClient{ClientStream: stream}
	return x, nil
}

type Dgraph_StreamExtSnapshotClient interface {
	Send(*StreamExtSnapshotRequest) error
	CloseAndRecv() (*StreamExtSnapshotResponse, error)
	grpc.ClientStream
}

type dgraphStreamExtSnapshotClient struct {
	grpc.ClientStream
}

func (x *dgraphStreamExtSnapshotClient) Send(m *StreamExtSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dgraphStreamExtSnapshotClient) CloseAndRecv() (*StreamExtSnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamExtSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dgraphClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, Dgraph_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) DropNamespace(ctx context.Context, in *DropNamespaceRequest, opts ...grpc.CallOption) (*DropNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropNamespaceResponse)
	err := c.cc.Invoke(ctx, Dgraph_DropNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dgraphClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, Dgraph_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DgraphServer is the server API for Dgraph service.
// All implementations must embed UnimplementedDgraphServer
// for forward compatibility
//
// Graph response.
type DgraphServer interface {
	Login(context.Context, *LoginRequest) (*Response, error)
	Query(context.Context, *Request) (*Response, error)
	Alter(context.Context, *Operation) (*Payload, error)
	CommitOrAbort(context.Context, *TxnContext) (*TxnContext, error)
	CheckVersion(context.Context, *Check) (*Version, error)
	RunDQL(context.Context, *RunDQLRequest) (*Response, error)
	AllocateIDs(context.Context, *AllocateIDsRequest) (*AllocateIDsResponse, error)
	UpdateExtSnapshotStreamingState(context.Context, *UpdateExtSnapshotStreamingStateRequest) (*UpdateExtSnapshotStreamingStateResponse, error)
	StreamExtSnapshot(Dgraph_StreamExtSnapshotServer) error
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	DropNamespace(context.Context, *DropNamespaceRequest) (*DropNamespaceResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	mustEmbedUnimplementedDgraphServer()
}

// UnimplementedDgraphServer must be embedded to have forward compatible implementations.
type UnimplementedDgraphServer struct {
}

func (UnimplementedDgraphServer) Login(context.Context, *LoginRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDgraphServer) Query(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDgraphServer) Alter(context.Context, *Operation) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alter not implemented")
}
func (UnimplementedDgraphServer) CommitOrAbort(context.Context, *TxnContext) (*TxnContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOrAbort not implemented")
}
func (UnimplementedDgraphServer) CheckVersion(context.Context, *Check) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVersion not implemented")
}
func (UnimplementedDgraphServer) RunDQL(context.Context, *RunDQLRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDQL not implemented")
}
func (UnimplementedDgraphServer) AllocateIDs(context.Context, *AllocateIDsRequest) (*AllocateIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIDs not implemented")
}
func (UnimplementedDgraphServer) UpdateExtSnapshotStreamingState(context.Context, *UpdateExtSnapshotStreamingStateRequest) (*UpdateExtSnapshotStreamingStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtSnapshotStreamingState not implemented")
}
func (UnimplementedDgraphServer) StreamExtSnapshot(Dgraph_StreamExtSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExtSnapshot not implemented")
}
func (UnimplementedDgraphServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedDgraphServer) DropNamespace(context.Context, *DropNamespaceRequest) (*DropNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropNamespace not implemented")
}
func (UnimplementedDgraphServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedDgraphServer) mustEmbedUnimplementedDgraphServer() {}

// UnsafeDgraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DgraphServer will
// result in compilation errors.
type UnsafeDgraphServer interface {
	mustEmbedUnimplementedDgraphServer()
}

func RegisterDgraphServer(s grpc.ServiceRegistrar, srv DgraphServer) {
	s.RegisterService(&Dgraph_ServiceDesc, srv)
}

func _Dgraph_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_Alter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).Alter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_Alter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).Alter(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_CommitOrAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).CommitOrAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_CommitOrAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).CommitOrAbort(ctx, req.(*TxnContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_CheckVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Check)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).CheckVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_CheckVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).CheckVersion(ctx, req.(*Check))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_RunDQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).RunDQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_RunDQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).RunDQL(ctx, req.(*RunDQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_AllocateIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).AllocateIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_AllocateIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).AllocateIDs(ctx, req.(*AllocateIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_UpdateExtSnapshotStreamingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtSnapshotStreamingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).UpdateExtSnapshotStreamingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_UpdateExtSnapshotStreamingState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).UpdateExtSnapshotStreamingState(ctx, req.(*UpdateExtSnapshotStreamingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_StreamExtSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DgraphServer).StreamExtSnapshot(&dgraphStreamExtSnapshotServer{ServerStream: stream})
}

type Dgraph_StreamExtSnapshotServer interface {
	SendAndClose(*StreamExtSnapshotResponse) error
	Recv() (*StreamExtSnapshotRequest, error)
	grpc.ServerStream
}

type dgraphStreamExtSnapshotServer struct {
	grpc.ServerStream
}

func (x *dgraphStreamExtSnapshotServer) SendAndClose(m *StreamExtSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dgraphStreamExtSnapshotServer) Recv() (*StreamExtSnapshotRequest, error) {
	m := new(StreamExtSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Dgraph_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_DropNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).DropNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_DropNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).DropNamespace(ctx, req.(*DropNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dgraph_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DgraphServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dgraph_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DgraphServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dgraph_ServiceDesc is the grpc.ServiceDesc for Dgraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dgraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Dgraph",
	HandlerType: (*DgraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Dgraph_Login_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Dgraph_Query_Handler,
		},
		{
			MethodName: "Alter",
			Handler:    _Dgraph_Alter_Handler,
		},
		{
			MethodName: "CommitOrAbort",
			Handler:    _Dgraph_CommitOrAbort_Handler,
		},
		{
			MethodName: "CheckVersion",
			Handler:    _Dgraph_CheckVersion_Handler,
		},
		{
			MethodName: "RunDQL",
			Handler:    _Dgraph_RunDQL_Handler,
		},
		{
			MethodName: "AllocateIDs",
			Handler:    _Dgraph_AllocateIDs_Handler,
		},
		{
			MethodName: "UpdateExtSnapshotStreamingState",
			Handler:    _Dgraph_UpdateExtSnapshotStreamingState_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _Dgraph_CreateNamespace_Handler,
		},
		{
			MethodName: "DropNamespace",
			Handler:    _Dgraph_DropNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Dgraph_ListNamespaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExtSnapshot",
			Handler:       _Dgraph_StreamExtSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
